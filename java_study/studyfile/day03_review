**CH07_상속**

- 두 클래스 관계 중 상속관계에서 상위 클래스(부모)가 하위 클래스(자식)에게 멤버를 물려준다.
- Upper Class A | lower Class B
    ==> public class B extends A { ... }

1. 부모 생성자 호출
    - 상속관계 A,B 클래스에서 B를 생성하기 위해서는 반드시 A를 먼저 생성해야한다.
    - public class B extends A {
        super();        // B를 생성할 때, 부모 생성자가 없다면 컴파일러가 자체적으로 생성
      }
      * 자식 객체를 만들 때, super()를 통해 하위객체에서의 다른 부분만 추가하여 중복을 피한다.

2. 메소드 재정의(Override)
    상위 객체에서 정의한 메소드가 이를 상속한 하위 객체에서 맞지 않을 때 사용
    -> 하위 객체에서 같은 메소드를 재정의하면 상속받은 메소드와 재정의 메소드 두 개가 있지만, 알아서 재정의 메소드를 사용
        *
    - 규칙
        1) 상위 메소드와 동일한 시그니처를 가져야 한다.
            Return type, Method name, Parameter list...
        * 중괄호 내부에서 차이를 둔다.

3. 상속 중 final
    - final은 최종이라는 의미를 갖는다.
        필드 : 필드에 지정된 값이 최종값이며, 변경할 수 없다.
        클래스 : 이 클래스가 최종이며, 상속할 수 없다.
            public final class 클래스명 {}   --> 클래스 상속 불가
        메소드 : 이 메소드가 최종이며, 재정의(Override)할 수 없다.
            public final 타입 메소드명() {
                - Overriding 불가 -
            }

4. 다형성 : 하나의 타입이지만, 다양한 객체를 넣을 수 있음
    1) 자동변환 : 부모 타입의 객체에는 자식 객체를 대입할 수 있다.
        ex) KumhoTire extends Tire
            Tire t2 = new Tire();
            Tire t1 = new KumhoTire();
        - 부모 클래스로 변환된 객체는 부모 메소드만 사용할 수 있다.
            Method Overriding이 있다면, Override된 메소드를 사용한다.

    2) 강제변환(Casting)
        - 부모 타입을 자식타입으로 변환
            * 단, 자식이 부모타입으로 변환한 후 다시 자식으로 돌아올 때 가능
        - 자식클래스 변수 = (자식클래스) 부모클래스타입;

    3) 추상 클래스 (abstract)
        - 클래스의 특성을 구체적으로 제시하지 않고, 이를 상속하는 여러 자식 클래스가 개별적으로 작성하도록 남겨둠.
        - 추상 클래스 선언
            public abstract class 클래스명
        - 추상 메소드 선언
            [public | protected] abstract 리턴타입 메소드명(매개변수);
            * 중괄호 사용 X

        * 클래스에 하나라도 추상메소드가 들어간다면, 반드시 추상클래스로 변환해야한다.
        * 추상클래스 역시 상속하여 사용한다.


