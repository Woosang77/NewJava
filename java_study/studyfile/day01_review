**변수**

변수 : 하나의 값을 저장할 수 있는 메모리 공간.

<순서> 타입 변수이름;
 ex)    int age; (선언부)
        age = 90; (초기화)
        ==> int age = 90;

<사용범위> 변수는 중괄호 {} 내에서 선언 및 사용 (클래스, 생성자, 메소드)
 * 현 단계에서는 메소드 내 변수만 다룸

 - 로컬 변수 : 메소드 블록 내에서 선언된 변수
 - 변수는 선언된 블록(각 메소드 블록) 내부에서만 사용이 가능하다.
   -> 클래스 내부에 여러 중괄호가 존재할 때, 변수들은 본인이 선언된 메소드 내부에서만 움직일 수 있다.

   ex) public class VariableScopeExample {
            public static void main(String[] args) {
                int v1 = 15;
                if(v1>10) {
                    int v2 = v1 - 10;
                }
                int v3 = v1 + v2 + 5;   // v2 컴파일링 에러
            }
       }

       - v2는 if문 내부에서 선언된 변수이므로 {} 밖에서 호출 및 사용 불가능
       - Error Message = "v2 cannot be resolved to a variable"
<데이터 타입>
 (기본 타입)
  - 정수 : byte / char / short / int(가장 자주 사용) / long
  - 실수 : float / double
  - 논리 : boolean (true / false)

   * String 타입은 클래스 타입으로, String 변수는 참조 변수이다.
   * 일반적인 변수들은 생성하고 값을 저장하는 개념이지만,
   * 참조변수는 객체를 생성하고, 객체의 번지값을 참조변수가 가진다.

 (타입 변환)
   1) 자동 변환 : 작은 크기의 타입을 큰 크기의 타입으로 변환하는 것을 의미함
   크기별 타입 : byte(1) < short(2) < int(4) < long(8) < float(4) < double(8)
   ex) byte byteValue = 10;
       int intValue = byteValue;
       System.out.println(intValue);
       // 10 출력

   2) 강제 변환(Casting) : 큰 크기의 타입을 작은 크기의 타입으로 욱여 넣을 때 사용
    사용 : 작은 크기 타입 = (작은 크기 타입) 큰 크기 타입;
    ex) int intValue = 103029770;
        byte byteValue = (byte) intValue;
        System.out.println(intValue);
        // 103029970 출력



**연산자**
(애매한 연산자만 빠르게 상기시키기)

<비교연산자>
  String 타입
   - 문자열 리터럴이 동일하다면, 변수는 같은 String 객체의 번지를 참조
     ex) String str1 = "Woosang";
         String str2 = "Woosang";
         str1 == str2;   // true

   - 객체 생성 연산자 new로 생성된 새로운 String 객체는 새로운 번지값을 갖는다.
     ex) String str3 = new String("Woosang");
         str2 == str3;   // false

   * 비교 연산자는 String 타입의 문자 리터럴이 아닌 번지값을 비교한다.
   * new로 생성된 동일 문자리터럴의 객체는 글자가 같지만 번지값이 달라 동등비교에서 불일치 발생

<대입연산자>
  - 연산자 기준 오른쪽을 왼쪽에 대입
  - 단순 대입 연산자(=) : a = 5 --> 5를 a에 대입
  - 복합 대입 연산자
    += : 변수=변수+피연산자
    -= : 변수=변수-피연산자
    ... 다른 연산자 역시 동일

<삼항연산자>
    조건식 ? 값 또는 연산식 : 값 또는 연산식
  - 조건식이 true라면, 콜론(:) 앞의 값 또는 연산식
  - 조건식이 false라면, 콜론(:) 뒤의 값 또는 연산식
    ex)
        int score = 90;
        char grade = (score>90) ? 'A' : 'B';
        ---------------(=)------------------
        int score = 90;
        char grade;
        if(score>90){
            grade = 'A';
        } else {
            grade = 'B';
        }

