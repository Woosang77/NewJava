**CH05_참조타입**

 1. 자바의 데이터 타입
   1) 기본타입 : 정수, 실수, 문자, 논리 등의 저장 타입 (int, float, char, boolean etc)
     단계|  1. 변수 선언       ex) int intValue;
           2. 데이터 저장          intValue = 5;
   2) 참조타입 : 객체의 번지를 참조하는 타입 (배열, 열거, 클래스, 인터페이스)

   * 기본타입은 실제 값을 변수 안에 저장하지만,
   * 참조타입은 실제 값을 가지는 객체의 메모리 주소(번지)를 저장하여, 변수 사용시 객체의 값을 가리키는 역할을 한다.

 2. 열거 타입 Enum
  - 데이터 중 몇 가지로 한정되는 값만을 갖는 경우 사용    ex) 요일 : 월, 화, 수, 목, 금, 토, 일
  - 선언 : 열거 타입의 이름.java         ex) Week.java
     public enum Week { MONDAY, TUESDAY, WEDNESDAY,THURSDAY, FRIDAY, SATURDAY_SUNDAY}
      - 열거 타입 내부의 열거 상수들은 관례상 대문자로 작성하고, 여러 단어일 경우 _를 붙인다.


**CH06_클래스**

    Basic - 객체란? : 물리적, 추상적으로 존재하고 자신의 속성을 가지고 있어 다른 것과 식별 가능한 것.
    Java - 독립적으로 존재하는 객체들의 상호작용으로 동작.
        ex) 사람 객체의 계산기 객체 이용
            int result = Calculator.add(10,20)

    <객체 간의 관계>

     객체는 대부분 다른 객체와 관계를 갖는다.
      - 집합관계: 객체 A, B, C는 객체 D의 하나의 부품이고, D는 완성품이다.
        ex) 자동차는 핸들, 타이어, 엔진과 같은 구성품으로 이루어진 완성품이다.
      - 사용관계: 객체 A가 B를 사용한다.
        ex) 사람 객체는 자동차 객체를 사용한다.
      - 상속관계: 상위 객체를 기반으로 하위 객체를 생성한다. 일반적으로, 상위객체는 종류를, 하위객체는 구체적 사물을 말한다.
        ex) 기계 객체는 자동차 객체의 상위 객체로, 서로 상속관계에 있다.

    <클래스 구성 멤버>

        1)필드
            - 객체 고유의 정보;
            - 범위 : 클래스 중괄호 내부 어디든 상관없다.
                ** 하지만 생성자 or 메소드 중괄호 내부에서 필드가 생성된다면, 그것은 필드가 아닌 로컬 변수이다. 로컬변수는 범위 밖에서 사용불가
            - 필드 대상은 기본타입과 참조타입(클래스, 배열, 인터페이스) 모두 가능
            ex) String str;
                int intValue [= 5](초기값);
                List array;
        2)생성자
            - 객체 생성을 위한 초기화 담당
                new 연산자를 사용하면, heap에 객체가 생성되고 주소(번지)가 리턴됨.
                리턴된 주소를 변수에 저장하며 사용할 때 주소를 따라 heap으로 접근
            - 기본생성자(Default)
                public 클래스명() { 빈 칸 } : 사용자가 따로 생성자를 만들지 않으면 이 같은 생성자가 자동생성
            - Customize
                클래스 내부 필드를 개별적으로 설정해야 하는 경우 생성자에 집어넣고, 생성과 동시에 지정할 수 있게 하는 경우가 많음
                ex) public class Korean {
                        String nation = "대한민국";
                        String name;
                        String number;      //이름과 전화번호는 객체 개별적인 생성 필요

                        public Korean(String name, String number) {
                            this.name = name;
                            this.number = number;
                        }
                    }
                    Korean k1 = new Korean("오복", "01012345678");
            - Overloading : 객체 생성할 때, 다양한 조합으로 생성할 수 있게 경우의 수를 늘려놓은 것
                 ex) Car() {...}
                     Car(String model) {}
                     Car(String model, String color){}
                     Car(String model, String color, int maxSpeed){} ...
        3)메소드


